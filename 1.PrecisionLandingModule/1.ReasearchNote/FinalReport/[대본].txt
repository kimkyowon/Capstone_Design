[대본]
<Slide 1>
안녕하세요 저는 ICT 18학번 김교원입니다.
저는 이번 캡스톤 디자인 과목에서 드론 정밀 착륙 유도 장치에 대해 연구하였습니다.

<Slide 2>
순서는 개요, 개발 과정 ,마무리로 발표가 끝난 뒤 간단한 시연을 보여드리겠습니다.

<Slide 3>
먼저 개요입니다.

< Slide 4>
제 솔루션의 필요성을 설명드리기 위해 시장, 운용 시 애로사항, 기존 솔루션의 한계 순서로 말씀드리겠습니다.

<Slide 5>
시장측면에서 보자면 현재, 전 세계적으로 무인항공기 사업이 활발히 이루어지고 있기에,  (space)
좌측 이미지의 경우  (space) 국내에서도 해당 분야 R&D 사업이 3분의1을 차지하고 있고 예산이 지난 해 동일한 5개 사업의 예산 467억 6,400만원 보다 15.8% 증가하였습니다. 
 
 (space) 또한 연구 분야 말고도 일반인들이 취미, 방송, 등으로 많이 운용됨에 따라 등록된 드론 개수와  (space) 
자격증 취득자 수 또한 큰 폭으로 증가하는 것을 보아 앞으로도 시장에서의 드론 활용이 늘어날 전망입니다.

<Slide 6>
다만 이렇게 시장이 커지면서 자연스레 절대적인 사용자 수와 드론 사용 건수가 많아지게 되며 인적 오류로 인한 안전 사고 또한 많이 발생하고 있습니다.  (space)

직접적인 사고 통계가 없어 좌측 표의 경우 사고 통계를 대체할 자료로, 사고 건수 자체가 늘어남을 간접적으로 알 수 있고  (space)
2020년도 사고 원인 분석 통계를 보면 약 90%가 인적 오류임을 알 수 있습니다. 

이를 해결하고자 자동화 솔루션을 만들자! 생각하였고, 
모든 드론에 적용될 수 있는 기능인 정밀 착륙 자동화 개발을 주제로 하였습니다.

<Slide 7>
다음으로 개발 입니다.
개발 과정에서는 각 부분별 어떤 과정을 거쳐 개발을 완료하였는지 보여드리겠습니다.

<Slide 8>
먼저 아이디어를 구체화 하기 위해 기존 자동 착륙 기능들을 살펴보니 
GPS만을 쓰는 솔루션과 IR 또는 마커를 추가적으로 사용한 기능이 대표적이었습니다.

다만 GPS 만을 쓰면  조금만 좌표 데이터에 오차가 생겨도 원하는 위치에 착륙하기 힘들고
IR의 경우 강한 빛을 쏴서 유도하는 것이라 전력 소모가 크며 햇빛이나 열원에 의해 간섭 받기 쉬우며
마커의 경우 픽셀단위로 완벽히 인식하지 않으면 의도된 동작이 어렵다는 단점이 있었습니다.

따라서 저는 열원에 의해 간섭받지 않고 픽셀단위로 인식하지 않아도 되도록 Ai 를 활용해 카메라로 드론 인식 후, 
착륙 지점과 드론의 위치를 계산하여 드론으로 좌표를 보내어 정밀 착륙 유도 과정을 도와주는 장치를 개발하기로 하였습니다.

<Slide 9>
개발에 필요한 구성을 크게 보자면 위와 같습니다.

이해를 위해 각 파트별로 설명드리자면
Drone은 무인 비행체이고, GCS의 경우 노트북과 조종기를 갖고있는 조종단이며 이번 연구의 핵심인
Precision Landing Station은 정밀 착륙 유도 장치 입니다.

<Slide 10>
해당 구조를 구체화 할 시 이런 구조가 되는데요, 
간단히 말하자면

조종단에서 사용자가 드론 조종을 하다가
정밀 착륙 유도 장치가 드론을 인식할 수 있는 범위에서 버튼 1을 꾹 눌러 자동 조종 모드로 전환하면
착륙지 중앙 좌표와 드론의 중점의 차이를 계산하여 이동 방향과 거리를 고려해 자동으로 조종 후 
착륙지 중앙에 도달 시 수직 착륙을 실행하게 됩니다.

<Slide 11>
다음은 드론, GCS, PrecisionLanding 순으로 개발 과정들 중 대표적인 것들에 대해 설명드리겠습니다.

먼저 드론은 하위 모듈과의 응집성이 중요하기에 이를 목표로
아래 업무를 수행하였습니다.
 
<Slide 12>
먼저 FC입니다. FC는 CPU 또는 인간의 뇌라고 생각해주시면 되겠습니다.

FC Parameter Setting 은 FC에 하위 장치를 모두 연결하고 제어하기 때문에 (space) 이렇게 방대한 설정 값들이 존재합니다.
저는 제가 정한 하위 장치에 맞게 (space) 우측처럼 세팅값을 설정해주었습니다.

<Slide 13>
PWM 테스트는 Motor를 제어하는데 FC의 PWM 신호를 사용합니다. 다만 이 신호가 정밀하지 않으면 안정적인 비행이 어렵습니다.
(space) 따라서 자체적인 PWM 테스트 코드를 제작 후 검증하여 
(space) 실제 전송 값과 실제 수신 값이 큰 차이가 없는 정상적인 PWM 출력 포트를 선별하였습니다.

<Slide 14>
순서대로 Telemetry Test 는 원격 송수신이 제대로 되는지, (space)

<Slide 15>
GPS는 FC로 GPS 좌표 데이터가 들어오는지, (space)

<Slide 16>
배터리 에이징 테스트는 배터리를 10번 충전 방전 했을 때 정상 출력 및 충전이 되는지에 대해 검증하였고.(space)

<Slide 17>
이러한 하위 모듈 검증이 끝난 뒤 (space)
드론 프레임에 하위 모듈들을 납땜 후 배선을 통해 체결하였습니다. 

<Slide 18>
이후 Motor의 속도를 조절해주는 ESC가 모두 균일하게 작동할 수 있도록 (space)
MissionPlanner라는 앱과 (space) ESC 교정 사이트에서 교정 및 검증 하였고 (space)

<Slide 19>
마지막으로 모터는 MissionPlanner 앱에서
4축 드론 기준 방향을 토대로 대각선 모터끼리만 같은 방향으로 도는 지와
방향별로 돌아야 할 모터가 도는지에 대해 검증하였습니다.

<Slide 20>
두 번째로 GCS 입니다. 
GCS 는 사용자의 실시간 제어 값을 송신하는 것과 
테스트를 위한 3가지 모드를 구현하는 것에 초점을 맞춰 (space) FW를 개발하였습니다.

<Slide 21>
먼저 모드 1입니다.

모드 1은 조이스틱과 버튼의 실시간 값을 모니터링 하여, 가장 마지막으로 PC에 전송된 값과 다를 시
해당 값을 담아 PC로 전송되게 됩니다.

추가적으로 안정성을 위해 인터럽트를 사용한 버튼 노이즈 방지 기능, 버튼을 3초간 눌러야만 인식되도록 하는 기능 등을 넣었습니다.

<Slide 22>
다음으로 모드 2 입니다.

모드 2는 사용자가 아닌, 정밀 착륙 장치가 자동 조종을 해주는 모드입니다.

버튼 1을 3초간 누를 시, 모드 2로 변경되어 

정밀 착륙 장치의 Raspberry Pi 5가 판단하여 보낸 방향과 거리가 담긴 데이터를 받아
해당 값을 업데이트 하여 자동 조종을 수행합니다.

추가적으로 안정성을 위해 긴급 정지 기능을 추가하였습니다.

<Slide 23>
다음으로 모드 3 입니다.

모드 3은 정밀도 평가를 위해 기존 GPS 만을 사용하는 자동 착륙 솔루션 기능 트리거 버튼 입니다.

버튼 2를 3초간 꾹 누를 시, PC로 버튼 2가 눌러져 있다는 데이터를 보내게 되고
PC에서는 RTL 즉, GPS 기반으로 기체가 부팅됐던 위치로 자동 이동 후 착륙하게 됩니다.

<Slide 24>
마지막으로 정밀 착륙 장치 입니다.

정밀 착륙 장치는 실시간으로 드론을 인식하는 것과
화면 중점과 인식된 객체의 Bounding Box의 중점과 거리를 계산하여 조종기 측에 데이터를 송신하는 것에 초점을 맞춰 SW를 개발하였습니다.

<Slide 25>

먼저 AI 학습입니다.

AI 학습은 무료로 제공된 4000장의 데이터 셋을 활용했고, (space)
개발 환경은 Colab,  GPU 는 Tesla 4, AI 모델은 EVB 환경을 고려해 Yolov8 중에서도 저사양 실시간 연산이 가능한 Yolov8n 모델을 사용했습니다.

<Slide 26>

학습 횟수를 늘려가며 인식 정밀도를 테스트 해 본 결과 횟수가 늘어날 수록
그래프상의 변화는 크지 않지만, 우측 그림을 보시면 인식율이 확실히 좋아지는 것을 알 수 있었습니다.

PPT상에는 없지만 200회 이상 데이터셋 추가 등을 진행해보았으나, 과적합현상이 일어나 다방면에서의 인식율이 하락하여
현재 보시는 100회 버전을 최종으로 하였습니다.

<Slide 27>

마지막으로 자동 조종 SW 개발입니다.

<Slide 28>
대략적인 순서도는 다음과 같습니다.

코드 안에 while문이 존재하고 지금 보시는 순서도가 while문에 대한 것입니다.
카메라 1 프레임을 읽어서 드론이 인식되면 객체 인식 박스의 중점과 화면 중점과의 거리와 방향을 계산하여
조종기 측으로 전달합니다.

만약 화면에서 객체가 인식되지 않는다면, 긴급 정지 명령을 보내게됩니다.

이후 화면 중앙에 도달 시, 랜딩 명령을 내리고 while문이 종료되게 됩니다.

<Slide 29>
마무리 입니다.

<Slide 30>
저는 이 연구를 통해 세 가지 방면에서의 기대 효과를 느꼈습니다.

<Slide 31>
먼저 활용도에서는 두 가지가 있습니다.
첫 번째로 다양한 환경에서 자동화된 착륙이 가능합니다.

고정된 착륙지 뿐만 아니라, 이동 속도와 착륙지의 거리를 추가적으로 계산한다면 움직이는 착륙지에도 착륙이 가능합니다.

그리고 반복 작업의 신뢰성과 생산성의 향상입니다.

기능이 정교해지면 동일 위치에 반복적으로 착륙할 수 있어 
충전 스테이션, 자동 적재/ 하역 등의 착륙 이후 업무를 예외 케이스 없이 원활하게 할 수 있습니다.

<Slide 32>

다음으로 기존 구조 개선에도 두 가지가 있습니다.

첫 번쨰로 기존의 마커를 활용한 솔루션의 경우 고해상도 카메라 모듈을 요구하나 본 시스템의 경우 저해상도에서도 운용이 가능합니다.

그리고 기존 시스템인 GPS와 혼합하여 사용 시 착륙 지점까지의 이동 또한 자동화가 가능하므로 자동화의 범주가 늘어나는 효과를 볼 수 있습니다.

<Slide 33>
마지막으로 인적 오류 예방입니다.

첫 번째로 실수로 인한 사고 방지입니다.
사람이 직접 착륙을 조종할 때 발생할 수 있는 실수 (예를 들면 위치 오판, 조작 미숙, 시야 불량 등)를 시스템이 자동으로 보정해줍니다.

그리고 일관된 품질과 안전 확보입니다.
자동화된 착륙 알고리즘은 항상 동일한 기준과 절차로 동작하므로, 작업자별 편차 없이 안정적인 착륙 품질을 유지할 수 있습니다.

<Slide 34>
추후 개선점으로는

결국 정밀도 향상을 위해서는 반복적인 테스트와 검증이 필요한데 드론이 한 번 파손될 경우 
개인이 부담하기엔 금전적 손실이 컸습니다.

따라서 저가형 경량 모델로 재선정 후 반복적인 테스트가 필요해 보입니다.

또한 데이터 송수신에 있어 MissionPlanner 앱에 매우 종속적입니다.
추후 가능하다면 이를 활용하여 자체 앱을 개발하여 종속적인 구조를 없애고 
기능 부분에서의 확장성을 확보해야 한다고 생각합니다.

<Slide 35>
이상으로 발표 마치겠습니다.
감사합니다.




