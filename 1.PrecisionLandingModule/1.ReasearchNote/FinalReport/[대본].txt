[대본]
<Slide 1>
안녕하세요 저는 ICT 18학번 김교원입니다.
저는 이번 캡스톤 디자인 과목에서 드론 정밀 착륙 유도 장치에 대해 연구하였습니다.

<Slide 2>
발표 내용은 다음과 같습니다.
개요, 개발 과정, 데모 영상 ,마무리 입니다.

<Slide 3>
먼저 개요입니다.

< Slide 4>
제 솔루션의 필요성을 설명드리기 위해 시장, 운용 시 애로사항, 기존 솔루션의 한계 순서로 말씀드리겠습니다.

<Slide 5>
시장측면에서 보자면 현재, 전 세계적으로 무인항공기 사업이 활발히 이루어지고 있기에, 좌측 이미지의 경우 국내에서도 해당 분야 R&D 사업이 3분의1을 차지하고 있고 예산이 지난 해 동일한 5개 사업의 예산 467억 6,400만원 보다 15.8% 증가하였습니다.

또한 연구 분야 말고도 일반인들이 취미, 방송, 등으로 많이 운용됨에 따라 등록된 드론 개수와 자격증 취득자 수 또한 큰 폭으로 증가하고 있습니다. 

<Slide 6>
다만 이렇게 시장이 커지면서 사용자도 늘어나고 있어 좋은 상황이지만, 절대적인 이용 건수가 많아지며 안전 사고 건수 또한 많이 발생하고 있습니다.

좌측 표를 보시면 아시겠지만 2020년도 기준 드론/추락 분실 사고 원인의 90%가 인적 오류인 것을 알 수 있습니다.

이를 해결하기 위해 여러가지 자동화 솔루션이 제공되고 있는데 그 중에서도 가장 중요한게 모든 드론에 적용될 수 있는 기능인
특정 위치에 착륙하는 기능이라고 생각합니다.

<Slide7>
다만 기존 착륙 솔루션은 GPS 데이터만을 의존적으로 사용하다보니, 조금만 좌표 데이터에 오차가 생겨도 원하는 위치에 착륙하기 힘들어집니다.

따라서 저는 Ai 를 활용해 드론 인식 후, 정밀 착륙 유도 과정을 도와주는 장치를 개발하기로 하였습니다.


<Slide8>
추후 자세한 구조를 보여드리겠지만 대략적으로 이 구조를 가져가며 제가 개발해야 할 것은
Drone, Joystick , Landing Station 이라고 알아주시면 되겠습니다.

<Slide 9>
다음으로 개발 과정 입니다.
개발 과정에서는 각 부분별 어떤 과정을 거쳐 개발을 완료하였는지 보여드리겠습니다.

<Slide 10>
먼저 드론인데 좌측 이미지는 데모 테스트에 활용된 실물 이미지고 우측은 파츠이며
파츠 이름 밑에는 제품 선정 조건입니다.

<Slide 11>
좌측은 드론을 제작하는데 있어 여러 과정을 거쳤지만 대표적으로 수행한 업무 목록입니다.
해당 업무를 통해 우측 기능들을 활용할 수 있었고 
순수 시간은 아니지만 위 업무를 수행하는데 약 6개월 가량 소모되었습니다.

<Slide 12>
GCS 입니다. GCS는 지상 통제기로 드론 원격 조종기라고 생각해주시면 됩니다.
좌측 이미지는 데모 테스트에 활용된 실물 이미지고 우측은 파츠이며
파츠 이름 밑에는 제품 선정 조건입니다.

<Slide 13>
좌측은 GCS를 제작하는데 있어 여러 과정을 거쳤지만 대표적으로 수행한 업무 목록입니다.
해당 업무를 통해 우측 기능들을 활용할 수 있었고 
순수 시간은 아니지만 위 업무를 수행하는데 약 4개월 가량 소모되었습니다.

<Slide 14>
Landing Station 입니다. Landing Station은 조종기를 통해 드론에게 착륙을 유도하는 장치라고 생각해주시면 됩니다.
좌측 이미지는 데모 테스트에 활용된 실물 이미지고 우측은 파츠이며
파츠 이름 밑에는 제품 선정 조건입니다.

<Slide 15>
좌측은 Landing Station 을 제작하는데 있어 여러 과정을 거쳤지만 대표적으로 수행한 업무 목록입니다.
해당 업무를 통해 우측 기능들을 활용할 수 있었고 
순수 시간은 아니지만 위 업무를 수행하는데 약 3개월 가량 소모되었습니다.

<Slide 16>
다음으로 데모 영상입니다.
데모영상은 테스트 구조, 구체적으로 무엇을 했는지, 적용한 코드 그리고 기능별 테스트 영상을 담아보았습니다.

<Slide 17>
영상 시청 전, 데모 테스트 구조에 대해 간략히 설명드리겠습니다.

사용자가 GCS의 조이스틱을 움직이면, Arduino Micro라는 개발보드가 값을 샘플링하여 MissionPlanner 앱으로 전달하게 됩니다.
그렇게 전달된 데이터는 Mavlink Protocol 기반으로 Packaging 되어 Sik Telemetry를 통해 원격 전송되게 됩니다.

드론은 이를 받아 FC에서 Mavlink Packet을 Parsing하여 이 (ESC,Motor 등을 가리키며) 하위 모듈을 제어합니다.

그렇게 사용자가 GCS의 Joystick을 통해 조종하다가 LandingStation 의 객체 인지 범주안에서 버튼 1을 꾹 눌러 
자동 착륙 모드로 전환을 하면 Landing Station은 RaspberryPi 5를 중심으로 AI 모델이 드론을 인식하여 
화면 중앙으로 드론이 올 수 있도록 자동 위치 제어를 하고, 중앙에 도착 시 정지 후 착륙 시퀀스를 거치게 됩니다.

<Slide 18>
원래는 실외에서 기존 GPS 기반 자동 착륙과 제가 개발한 기능을 번갈아 수행하며 정밀도를 비교하려 하였으나
한 개의 ESC가 문제가 있었다는걸 캐치하지 못해 드론이 파손되어 실내 모의 테스트를 통해 데모 영상을 구성하였다는 점을 고려하셔서 봐주시면 되겠습니다.

<Slide 19>
마무리 입니다.

<Slide 20>
[ 활용도 ] 
- 선박, 병원, 항만 등 특정 위치에 고정적으로 정밀 착륙을 요구하는 특수 상황에서 충분히 활용 가능
[ 기존 구조 개선 ]
기존의 마커를 활용한 정밀 착륙의 경우 장거리에서의 마커 인식을 요구하나, 본 시스템의 경우 
    고 해상도 카메라 모듈을 요구하지 않음.
기존 시스템인 GPS와 혼합하여 사용 시 더욱 효과적인 정밀 착륙을 수행할 수 있음.
[ 인적 오류 예방 ]
자동 랜딩 기능으로 사용자 인적 오류 예방 가능

<Slide 21>
추후 개선점으로는

결국 정밀도 향상을 위해서는 반복적인 테스트와 검증이 필요한데 드론이 한 번 파손될 경우 
개인이 부담하기엔 금전적 손실이 컸습니다.

따라서 저가형 경량 모델로 재선정 후 테스트가 필요해 보입니다.

또한 데이터 송수신에 있어 MissionPlanner 앱에 매우 종속적입니다.
추후 가능하다면 이를 활용하여 자체 앱을 개발하여 종속적인 구조를 없애고 
기능 부분에서의 확장성을 확보해야 한다고 생각합니다.

<Slide 22>
이상으로 발표 마치겠습니다.
감사합니다.




